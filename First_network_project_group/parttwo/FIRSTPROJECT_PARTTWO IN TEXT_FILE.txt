FIRST PROJECT - PYTHON CODE 
PART TWO 

FIRST CLIENT
_____________________
# Mariam Hamad - 1200837 
import socket
import time
def client_program():
    host = "192.168.43.255"  # Broadcast address
    port = 8855  # Server port number
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # create UDP socket for server
    client_socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)  # Enable broadcasting
    client_socket.settimeout(2)  # Set timeout for receiving response

    student_name = "leena affouri"  # sender's first and last names

    num = 0
    while True:
        message = f"from: {student_name}"  # Message containing student's name
        client_socket.sendto(message.encode(), (host, port))  # Send message to the broadcast address

        try:
            data, address = client_socket.recvfrom(1024)  # Receive response from server
            print(f" {data.decode()} ")

        except socket.timeout:
            print("No response from server")

        num += 1
        time.sleep(2)  # Wait for 2 seconds before sending the next message
    client_socket.close()  # Close the connection

if _name_ == '_main_':
    client_program()




SECOND CLIENT
_____________
#Nirmeen Al-Sheikh
# Mariam Hamad - 1200837

import socket
import time

def client_program():
    host = "192.168.43.255"  # Broadcast address
    port = 8855  # Server port number
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # create UDP socket for server
    client_socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)  # Enable broadcasting
    client_socket.settimeout(2)  # Set timeout for receiving response
    student_name = "Nirmeen Al-Sheikh"  # sender's first and last names
    num = 0
    while True:
        message = f"from: {student_name}"  # Message containing student's name
        client_socket.sendto(message.encode(), (host, port))  # Send message to the broadcast address

        try:
            data, address = client_socket.recvfrom(1024)  # Receive response from server
            print(f" {data.decode()} ")

        except socket.timeout:
            print("No response from server")

        num += 1
        time.sleep(2)  # Wait for 2 seconds before sending the next message

    client_socket.close()  # Close the connection

if _name_ == '_main_':
    client_program()


SERVER
______________________
# Mariam Hamad - 1200837  
import socket
import time
def server_program():         #define server
    host = "192.168.43.246"   # IPv4 Address for server.
    port = 8855               # port number.
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # creat UDP socket.
    server_socket.bind((host, port)) # bind socket to local port number.
    clients = {}  # dictionary to store client information
    # Add server name
    server_first_name = "Mariam"
    server_last_name = "Hamad"
    print(f"Server Name: {server_first_name} {server_last_name}")
    while True:
        message, client_address = server_socket.recvfrom(1024) # read from UDP socket into message,getting client address
                                                               # client address = client ip & port number.
        message = message.decode()
        current_time = time.strftime("%H:%M:%S", time.localtime())
        if client_address not in clients:
            # New client
            clients[client_address] = message
        else:
            # Existing client, update the message and time
            clients[client_address] = (message, current_time)
            print(f"Received message from {message} at {current_time}")
            # Send acknowledgment to client
            response_message = f"Server received your message at {current_time}"
            server_socket.sendto(response_message.encode(), client_address)
if __name__ == "__main__":
    server_program()